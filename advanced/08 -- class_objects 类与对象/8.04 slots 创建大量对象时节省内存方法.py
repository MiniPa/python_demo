# 创建大量对象时节省内存方法
## 通过给类添加 __slots__ 属性来极大的减少实例所占的内存

class Date:
    __slots__ = ['year', 'month', 'day']
    def __init__(self, year, month, day):
        self.year = year
        self.month = month
        self.day = day

## 定义 __slots__ 后，Python 就会为实例使用一种更加紧凑的内部表示
## 不能再给实例添加新的属性了，只能使用在 __slots__ 中定义的那些属性名

## 使用 slots 后节省的内存会跟存储属性的数量和类型有关
## 内存总量和将数据存储在一个元组中差不多

## 定义了 slots 后的类不再支 持一些普通类特性了，比如多继承，减少对它的使用冲动

## __slots__ 的一个常见误区是它可以作为一个封装工具来防止用户给实例增 加新的属性
## 这个并不是它的初衷，更多的是用来作为一个内存优化工具






























